
Pratiksha Sharma
ps179

Genre: 2-D Scrolling Platformer
Name: The White Walkers
Brief Story: 
The White Walkers have crossed the Great Wall in the North and are attacking
the capital, Kings Landing. Jon Snow needs to kill the White walkers and 
save the iron throne.

Goal: 
The player needs to shoot the White Walkers (enemies) that approach him and get to the iron throne. 
In the first level, there are no obstacles for the player to aim at the white walkers.
In the second level, there are blocks that move up and down and hinder the player.
To win the first level, the player needs to kill the white walkers, and make his way to the Throne
at the end of the screen. If a white walker touches the Player, the Player will turn into 
one of them and join the Army of the Dead. The player needs to finish the second level to win
the game. 10 points will be awarded per white walker that was killed and the total score will be calculated.


How to add New Features to the Game:
Music Manager:
Manages when to play which sound file. Basically it will be a method that stops the background music that is being played
and plays the desired music. For now, when an enemy dies, I have a music piece that is played. And when the player reached the second
Level, different background music starts playing. With the music manager, only one piece of music can be played at once, instead
of overlapping different pieces of music.
The musicManager function should have different conditions to decide when to play what music.


Adding Levels:
Each Level that is to be added should inherit from the LevelController abstract class.
Each Level to be added should have the following methods:
updateLevel()
createSceneNodes()

These methods should contain implementation other than the common implementations done in the LevelControler class.

Make the Enemies appear at a Constant basis:
For now, in Level 1, another batch of enemies come on the screen only if the Player has not killed 8 Enemies.
The appearance can be made much smoother by checking if all the enemies in the myEnemyList have left the Screen and then calling for
another batch of enemies onto the screen.
This can be achieved simply by creating a method that checks if there are any enemies left on the screen. If not and the 
Player still needs to kill more enemies to get to next level, then the enemies can be made to appear.

Adding features to shoot at Enemies at an Angle:
For now the Player can only shoot straight. A feature to shoot at an angle can be achieved by making changes to the
Snowball.Move() method in SnowBall class. Also, the conditions inside the if(shootBall) statement of the stepHelper function in
LevelController Class.
A method should be created to detect which enemy the Player is dragging his mouse towards and then change
the directional orientation of the Ball accordingly. 

Keeping track of highest Scores:
I do not know if it is possible in javaFx, but keeping track of the highest Score in the game would be great.
A data structure to store the Highest Score will be needed.
A method updateHighestScore() is needed that checks if the highest Score stored so far is less than the score Scored at the
particular game. Then the method just updates the highest Score in the data structure.



Design Choices in this Project:
Game Controller Super Class:
Game is a controller class is made so that a new Game Object can be created from the Main method and then the functions can be called from the Object created, instead of putting them all in Main class. I wanted my Main method to have functions for 
setting up the stage, exiting and starting the game. 

LevelController class is an abstract class that contains features and functions required for both the levels of the game.
Both Level1 and Level2 classes then inherit this class. This was donâ€™t to prevent duplication of code It was made an abstract class, so that it could not be instantiated and this its methods could not be accessed from outside of classes that did not inherit this class. This makes sure that whatever is in LevelController class is not changed by some other class.
However, because of this, some of the instance variables I need in Level 1 and Level 2 were made protected instead of private, which is 
a bad design. 

updateLevel() abstract method was created in the LevelController class because the method's implementation differs based
on the Level. For example, in Level 2, collision between the Player and Block need to be checked that is not required in
Level 1.

createSceneNodes() abstract method was created in LevelController class because the methods implementation differs based 
on the Level of the game. For example, blocks need to be added to the root of the Scene in Level 2 which is not needed in Level1.
This makes keeps the code cleaner and more readable. Also, there is no point in adding functions in a super class that one or two of
the subclasses might not use.

I chose not to make Sprite class but separate Enemy, Player and SnowBall classes, because these objects do not share any behaviours in common.
The setup of Enemy, Player and SnowBall classes are similar (all of them contain ImageView attributes) and thus might
seem like duplication of code, however, they all have ImageView attributes created from different images. 

I could have made a Sprite class but in order to create an ImageView, I would have to pass in the image file names from
each Player, Enemy and SnowBall class.
Even though it is a bad design, I have lots of conditional statements in my stepHelper method for both levels. 

All of the instance variables in the classes (except for theLevelController super class) are made private. 














































































































































































































 
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 





























































































































































































































































 













 
